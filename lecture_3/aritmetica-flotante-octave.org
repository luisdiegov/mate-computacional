#+TITLE: Aritmética de punto flotante: Ejemplos
#+AUTHOR: Adolfo De Unánue Tiscareño
#+EMAIL: adolfo.deunanue@itam.mx
#+OPTIONS: tex:t
#+STARTUP: latexpreview

* Representación Interna

Observemos el número racional $x = 1/7$, cuya representación en /decimal/ es periódica: $0.\bar{142857}$.
La máquina no puede contener un número infinito de dígitos, veamos como lo resuelve ~GNU/Octave~:

#+begin_src octave :session *octave* :results output :exports both
x = 1/7
x
#+end_src

Ahora esta expresión que devuelve ~octave~  se debe al formato de salida establecido con el comando `format`:

#+begin_src octave :session *octave* :results output :exports both
format long
x = 1/7
x
format short e
x
format long e
x
format short g
x
format long g
x
format  # Para reiniciar el formato.
#+end_src

El /error de redondeo/ siempre aparece ya que la computadora sustituye el número real $x$ por su contraparte $almacenado(x)$,
pero esta diferencia está controlada por el *epsilón de la máquina* $\epsilon_M$, el cuál es la distancia entre `1` y el número
en punto flotante mayor que `1`y más cercano a éste.

#+begin_src octave :session *octave* :results output :exports both
eps
#+end_src

Los límites se obtienen como sigue:

#+begin_src octave :session *octave* :results output :exports both
realmin
#+end_src

#+begin_src octave :session *octave* :results output :exports both
realmax
#+end_src

Los números flotantes no verifican todas las propiedades aritméticas de los reales, por ejemplo,
se violan las propiedades /asociativa/ y /distributiva/:

#+begin_src octave :session *octave* :results output :exports both
a = 1;
b = 1;
while a + b != a
   b = b/2
end
#+end_src

Este programa si fuera en los *reales* nunca acabaría (¿Por qué?), en cambio aquí observamos que hay por lo menos un número `b` diferente de cero
para el cual $a+b=a$.

La asociatividad  se ve rota cuando ocurre un /overflow/ o un /underflow/

#+begin_src octave :session *octave* :results output :exports both
a = 1.0e+308;
b = 1.1e+308;
c = -1.001e+308
#+end_src

#+begin_src octave :session *octave* :results output :exports both
a + (b + c)
#+end_src

#+begin_src octave :session *octave* :results output :exports both
(a + b ) + c
#+end_src

Otro ejemplo es cuando sumamos dos números con signos opuestos pero valor absoluto similar,
a esta situación se le conoce como /pérdida de cifras significativas/:

#+begin_src octave :session *octave* :results output :exports both
x = 1.e-15;
((1+x) - 1)/x
#+end_src

¿A qué debería de dar? ¿De cuánto es el error?

Un concepto de relativa utilidad es el de *funciones anónimas*:

*** Ejercicio

#+begin_src octave :session *octave* :results output :exports both
f = @(x) x ./ (x.*(x-1));
g = @(x) 1 ./ (x-1);
#+end_src

¿A qué es igual (y por qué) estas funciones cuándo las evaluamos en `0`, `eps` e `Inf`?

En ~GNU/Octave~ los cálculos son realizados siguiendo el estándar de la *IEEE*, es decir utilizan doble precisión.
Para poder ver la representación interna, le pediremos a ~octave~  que lo muestre en =hexadecimal=.


#+begin_src octave :session *octave* :results output :exports both
  format hex;
  x = 2;
  ans = x
#+end_src

* Otras cantidades definidas por el *IEEE 754*



#+begin_src octave :session *octave* :results output :exports both
  format long
  ans = 1 / 0
#+end_src

#+RESULTS:
:
: warning: division by zero
: ans = Inf

#+begin_src octave :session *octave* :results output :exports both
  1 / Inf
#+end_src

#+RESULTS:
: ans = 0

Los cómputos de cantidades indeterminadas producen ~NaN~:

#+begin_src octave :session *octave* :results output :exports both
  0*Inf
#+end_src

#+begin_src octave :session *octave* :results output :exports both
  0/0
#+end_src

#+begin_src octave :session *octave* :results output :exports both
  Inf/Inf
#+end_src


* Ejemplos de problemas con aritmética de punto flotante

** Polinomios

Veamos que pasa si queremos dibujar el polinomio $p(x) = (1-x)^{10}$ en la región $0 \leq x \leq 2$:

#+begin_src octave :session *octave* :results  file :exports both
  x = linspace(0, 2, 101);
  c = [1, -10, 45, -120, 210, -252, 210, -120, 45, -10, 1];
  p = polyval(c,x);
  plot(x,p);
  xlabel('x'), ylabel('p(x)');
  print -dpng pol10a.png;
  ans = "pol10a.png"
#+end_src

#+RESULTS:
[[file:pol10a.png]]

Todo normal hasta aquí, ¿Qué pasa si hacemos /zoom/ a la región $0,99 \leq x \leq 1.01$?

#+begin_src octave :session *octave* :results  file :exports both
  x = linspace(0.99, 1.01, 101);
  p = polyval(c,x);
  plot(x,p);
  xlabel('x'), ylabel('p(x)');
  print -dpng  pol10b.png;
  ans = "pol10b.png"
#+end_src

#+RESULTS:
[[file:pol10b.png]]

Contrasta esto con la versión normal del polinomio $p(x)$:

#+begin_src octave :session *octave* :results value file :exports both
  p = (1 -x).^(10);
  plot(x,p);
  xlabel('x'), ylabel('y');
  print("pol10c", "-dpng");
  ans = "pol10c.png"
#+end_src

#+RESULTS:
[[file:pol10c.png]]


** Conmutatividad de las raices cuadradas

#+begin_src octave :session *octave* :results output :exports both

  x = 1:0.25:3.75;
  n = 100
  t = x;
  for i = 1:n
    t = sqrt(t);
  end

  for i = 1:n
    t = t  .* t;
  end
  disp(sprintf('x       t        x-t '))
  for k = 1:10
    disp(sprintf(' %7.4f  %7.4f  %7.4f', x(k), t(k), x(k)-t(k)))
  end
#+end_src

#+RESULTS:
#+begin_example

n =  100
> > octave> > > octave> x       t        x-t
> >   1.0000   1.0000   0.0000
  1.2500   1.0000   0.2500
  1.5000   1.0000   0.5000
  1.7500   1.0000   0.7500
  2.0000   1.0000   1.0000
  2.2500   1.0000   1.2500
  2.5000   1.0000   1.5000
  2.7500   1.0000   1.7500
  3.0000   1.0000   2.0000
  3.2500   1.0000   2.2500
#+end_example


** Cancelación catastrófica

La /cancelación catastrófica/ ocurre cuando  números pequeños son calculados
de números grandes los cuales son a su vez sujetos a un error de redondeo.

Veamos la gráfica de

\begin{equation}
f(x) = \frac{1-\cos x}{x^2}
\end{equation}

alrededor de la región $-4\times 10^{-8} \leq x \leq 4\times 10^{-8}$:

#+begin_src octave :session *octave* :results value file :exports results
    x = linspace(-4e-8,4e-8, 1000);
    y = 2*(sin(x./2)).^2./x.^2;
    plot(x,y);
    xlabel("Resultado exacto");
    print -dpng no_catastrofico.png
    ans = "no_catastrofico.png"
#+end_src

#+RESULTS:
[[file:no_catastrofico.png]]

Pero el resultado obtenido con números flotantes es:

#+begin_src octave :session *octave* :results value file :exports both
  x = linspace(-4e-8,4e-8, 1000);
  y = (1-cos(x))./x.^2;
  plot(x,y);
  print -dpng catastrofico.png
  ans = "catastrofico.png"
#+end_src

#+RESULTS:
[[file:catastrofico.png]]

Analicemos por pasos, para el caso $x = 1 \times 10^{-8}$

#+begin_src octave :session *octave* :results output :exports both
x = 1.1e-8
#+end_src

#+RESULTS:
: x =    1.10000000000000e-08


#+begin_src octave :session *octave* :results output :exports both
1 - cos(x)
#+end_src

#+RESULTS:
: ans =    1.11022302462516e-16

#+begin_src octave :session *octave* :results output :exports both
(1-cos(x))./(x.^2)
#+end_src

#+RESULTS:
: ans =    9.17539689772857e-01

Esto representa un error relativo cercano al $80$ %.

Esta cancelación catastrófica se puede arreglar usando las identidades
trigonométricas y reescribiendo la ecuación como:

\begin{equation}
g(x) = \frac{2 \sin^2 \left( x/2 \right)}{x^2}
\end{equation}

(Con esta ecuación se realizó la primera gráfica).

Dicho de otra manera el *algoritmo* $f(x)$ es /inestable/, y el *algoritmo* $g(x)$ es /estable/.


** Ley Asociativa

Consideremos la serie armónica:

\begin{equation}
S = \sum^N_{i=1} \frac{1}{i}
\end{equation}

Siendo $N = 10^6$, calculamos usando la representación "exacta" (a 20 decimales, usando ~python~):

#+begin_example python
  from sympy.core.numbers import Float
  N = 1000000
  s = Float(0,20)
  for i in range(1, N):
      s = s + 1.0/i
  return s
#+end_example

#+RESULTS:
: 14.392726722865723583

En cambio, usando aritmética *IEEE* ( en ~octave~ ):

#+begin_src octave :session *octave* :exports both
  N=1000000
  format long e
  s = 0;
  for i=1:N
    s = s + 1.0/i;
  end
  ans = s
#+end_src

#+RESULTS:
: 14.39272672286499

Las últimas cifras son diferentes a las del resultado "exacto". Pero observa lo siguiente:

#+begin_src octave :session *octave* :exports both
  N=1000000
  format long e
  s = 0;
  for i=N:-1:1
    s = s + 1.0/i;
  end
  ans = s
#+end_src

#+RESULTS:
: 14.39272672286577

La razón es la siguiente: /Si sumamos un número pequeño a un número grande, los bits menos significativos del pequeño se perderán./
Por lo que es mejor empezar con los números pequeños al principios y los grandes al final. El problema de esto, es que el proceso de
/ordenamiento/ significa mucho trabajo computacional que quizá no valga la pena.
